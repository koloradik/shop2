
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String   @default(cuid())
  email    String    @unique
  emailVerified DateTime?
  password String?
  image    String    @default("")
  balance  Float     @default(0)
  role     String    @default("User")
  rating   Int       @default(0)
  products Product[]
  comments Comment[]

  wishlist Wishlist[]

   accounts      Account[]
   sessions      Session[]
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  developer   String
  description String @default("")
  price       Float  @default(0)
  discount    Float  @default(0)
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  wishlist Wishlist[]
  comments Comment[]
}

model Wishlist {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Comment {
  id       String    @id @default(uuid())
  rating   Int       
  text     String

  userId      String
  user        User   @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}


//  next-auth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
